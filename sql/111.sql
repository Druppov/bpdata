/******************************************************************************/
/***          Generated by IBExpert 2003.10.06 04.10.2018 10:52:21          ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES WIN1251;

CONNECT 'localhost:D:\_BPOS\_data\BPOSDATA.GDB' USER 'SYSDBA' PASSWORD 'masterkey';



/******************************************************************************/
/***                                Domains                                 ***/
/******************************************************************************/

CREATE DOMAIN PUBLISHED AS
CHAR(1) CHARACTER SET WIN1251
DEFAULT 'N'
NOT NULL;

CREATE DOMAIN T_MONEY AS
NUMERIC(15,2)
DEFAULT 0;



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR GEN_CHECKS_ID;
SET GENERATOR GEN_CHECKS_ID TO 0;

CREATE GENERATOR GEN_CURRENT_INVOICE_STRNO;
SET GENERATOR GEN_CURRENT_INVOICE_STRNO TO 0;

CREATE GENERATOR GEN_CURRENT_TOVAR_STRNO;
SET GENERATOR GEN_CURRENT_TOVAR_STRNO TO 1;

CREATE GENERATOR GEN_INTL_RASHOD_ID;
SET GENERATOR GEN_INTL_RASHOD_ID TO 4;

CREATE GENERATOR GEN_MGTPACKETS_ID;
SET GENERATOR GEN_MGTPACKETS_ID TO 0;

CREATE GENERATOR GEN_MGTPACKETS_IN_ID;
SET GENERATOR GEN_MGTPACKETS_IN_ID TO 0;

CREATE GENERATOR GEN_PAYCHECKS_ID;
SET GENERATOR GEN_PAYCHECKS_ID TO 30448;

CREATE GENERATOR GEN_PAYCHECKS_INTL_ID;
SET GENERATOR GEN_PAYCHECKS_INTL_ID TO 658;

CREATE GENERATOR GEN_PERSONAL_ID;
SET GENERATOR GEN_PERSONAL_ID TO 519;

CREATE GENERATOR GEN_PERS_STATUS_ID;
SET GENERATOR GEN_PERS_STATUS_ID TO 4;

CREATE GENERATOR GEN_POS_ID;
SET GENERATOR GEN_POS_ID TO 10;

CREATE GENERATOR GEN_SMENY_ID;
SET GENERATOR GEN_SMENY_ID TO 180;

CREATE GENERATOR GEN_TOVARY_ID;
SET GENERATOR GEN_TOVARY_ID TO 724;

CREATE GENERATOR GEN_TOVAR_TYPE_ID;
SET GENERATOR GEN_TOVAR_TYPE_ID TO 1;

CREATE GENERATOR GEN_WORKS_ID;
SET GENERATOR GEN_WORKS_ID TO 5;



/******************************************************************************/
/***                               Exceptions                               ***/
/******************************************************************************/

CREATE EXCEPTION PAYCHECK_NOTFOUND 'Не найден чек для табличной части';

CREATE EXCEPTION SAMEDATES 'Обнаружены одинаковые даты для цены. Исправьте дату';



SET TERM ^ ; 



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/

CREATE PROCEDURE CREATE_MGTPACKET (
    POS_ID INTEGER,
    DEST_POS_ID INTEGER)
RETURNS (
    PACNO INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CREATE_PAYCHECK (
    POS_ID INTEGER,
    DATIME TIMESTAMP,
    SMENA_ID INTEGER,
    EKR_CHECKNO INTEGER,
    EKR_SUMMA FLOAT,
    MARKET_AGE INTEGER,
    MARKET_MALE INTEGER,
    ZAKAZNO INTEGER)
RETURNS (
    CHECKNO INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CREATE_PAYCHECK_INTL (
    POS_ID INTEGER,
    DATIME TIMESTAMP,
    SMENA_ID INTEGER,
    RASHOD_ID INTEGER,
    PERSON_ID INTEGER)
RETURNS (
    CHECKNO INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CREATE_PAYCHECK_RET (
    POS_ID INTEGER,
    DATIME TIMESTAMP,
    SMENA_ID INTEGER,
    EKR_CHECKNO INTEGER,
    EKR_SUMMA FLOAT)
RETURNS (
    CHECKNO INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GET_TEKSMENA (
    POS_ID INTEGER)
RETURNS (
    SMENAID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GET_TOVAR_PRICE (
    PRICEDATE DATE,
    TOVAR_ID INTEGER,
    POS_ID INTEGER)
RETURNS (
    PRICE NUMERIC(15,2))
AS
BEGIN
  EXIT;
END^



SET TERM ; ^


/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/

CREATE TABLE BALANCES (
    POS_ID       INTEGER NOT NULL,
    BALANCEDATE  DATE NOT NULL,
    TOVAR_ID     INTEGER NOT NULL,
    AMOUNT       FLOAT,
    PUBLISHED    PUBLISHED
);

CREATE TABLE BPOS (
    POS_ID     INTEGER NOT NULL,
    POS_NAME   CHAR(30) CHARACTER SET WIN1251 NOT NULL,
    ADDR       CHAR(120) CHARACTER SET WIN1251 COLLATE PXW_CYRL,
    PUBLISHED  CHAR(1) CHARACTER SET WIN1251 DEFAULT 'N'
);

CREATE TABLE DOBAVKI (
    TOVAR_ID    INTEGER NOT NULL,
    DOBAVKA_ID  INTEGER NOT NULL,
    PUBLISHED   PUBLISHED NOT NULL
);

CREATE TABLE INTL_RASHOD (
    ID          INTEGER NOT NULL,
    RASHODNAME  CHAR(40) CHARACTER SET WIN1251,
    PUBLISHED   PUBLISHED NOT NULL
);

CREATE TABLE MGTPACKETS (
    POS_ID          INTEGER NOT NULL,
    DEST_POS_ID     INTEGER NOT NULL,
    PACKETNO        INTEGER NOT NULL,
    PACKETFILENAME  CHAR(25) CHARACTER SET WIN1251 COLLATE PXW_CYRL,
    DATA            BLOB SUB_TYPE 0 SEGMENT SIZE 1024
);

CREATE TABLE MGTPACKETS_IN (
    POS_ID          INTEGER NOT NULL,
    PACKETNO        INTEGER NOT NULL,
    PACKETFILENAME  CHAR(25) CHARACTER SET WIN1251 COLLATE PXW_CYRL,
    DATA            BLOB SUB_TYPE 0 SEGMENT SIZE 1024,
    PROCESSED       CHAR(1) CHARACTER SET WIN1251 COLLATE PXW_CYRL
);

CREATE TABLE PAYCHECKS (
    POS_ID       INTEGER NOT NULL,
    SMENA_ID     INTEGER NOT NULL,
    CHECKNO      INTEGER NOT NULL,
    SUMMA        T_MONEY,
    EKR_CHECKNO  INTEGER DEFAULT 0,
    EKR_SUMMA    T_MONEY,
    STAMP        TIMESTAMP,
    PUBLISHED    CHAR(1) CHARACTER SET WIN1251 DEFAULT 'N',
    RET          SMALLINT DEFAULT 0,
    M_MALE       SMALLINT,
    M_AGE        SMALLINT,
    ZAKAZNO      INTEGER default 0
);

CREATE TABLE PAYCHECKS_TB (
    POS_ID     INTEGER NOT NULL,
    CHECKNO    INTEGER NOT NULL,
    STRNO      SMALLINT NOT NULL,
    TOVAR_ID   INTEGER NOT NULL,
    KVO        SMALLINT,
    PRICE      T_MONEY,
    SUMMA      T_MONEY,
    PUBLISHED  PUBLISHED NOT NULL,
    ROW_NPP    INTEGER
);

CREATE TABLE PCHECKS_INTL (
    POS_ID     INTEGER NOT NULL,
    SMENA_ID   INTEGER NOT NULL,
    CHECKNO    INTEGER NOT NULL,
    SUMMA      T_MONEY,
    STAMP      TIMESTAMP,
    RASHOD_ID  INTEGER,
    PERSON_ID  INTEGER,
    PUBLISHED  CHAR(1) CHARACTER SET WIN1251 DEFAULT 'N'
);

CREATE TABLE PCHECKS_INTL_TB (
    POS_ID     INTEGER NOT NULL,
    CHECKNO    INTEGER NOT NULL,
    STRNO      SMALLINT NOT NULL,
    TOVAR_ID   INTEGER NOT NULL,
    KVO        SMALLINT,
    PRICE      T_MONEY,
    SUMMA      T_MONEY,
    PUBLISHED  PUBLISHED NOT NULL,
    ROW_NPP    INTEGER
);

CREATE TABLE PERS_STATUS (
    STATUS_ID    INTEGER NOT NULL,
    STATUS_NAME  CHAR(20) CHARACTER SET WIN1251 NOT NULL,
    PUBLISHED    PUBLISHED
);

CREATE TABLE PERSONAL (
    PERSON_ID  INTEGER NOT NULL,
    FIO        CHAR(60) CHARACTER SET WIN1251 NOT NULL,
    ISACTIVE   CHAR(1) CHARACTER SET WIN1251 DEFAULT 'Y' NOT NULL,
    PUBLISHED  PUBLISHED NOT NULL
);

CREATE TABLE SMENY (
    POS_ID     INTEGER NOT NULL,
    SMENA_ID   INTEGER NOT NULL,
    DATEOPEN   TIMESTAMP,
    DATECLOSE  TIMESTAMP,
    CHIEF      INTEGER,
    ZOTCHENO   INTEGER,
    PUBLISHED  PUBLISHED
);

CREATE TABLE SMENY_TB (
    POS_ID      INTEGER NOT NULL,
    SMENA_ID    INTEGER NOT NULL,
    PERSON_ID   INTEGER NOT NULL,
    TIME_START  TIME,
    TIME_END    TIME,
    WORK_ID     INTEGER NOT NULL,
    PUBLISHED   PUBLISHED NOT NULL
);

CREATE TABLE TAXS (
    TAX_ID     SMALLINT NOT NULL,
    CODE       CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    NAME       CHAR(30) CHARACTER SET WIN1251 COLLATE PXW_CYRL,
    RATE       T_MONEY NOT NULL,
    PUBLISHED  PUBLISHED NOT NULL
);

CREATE TABLE TOVAR_TYPE (
    TYPE_ID         SMALLINT DEFAULT 0 NOT NULL,
    TYPE_NAME       CHAR(40) CHARACTER SET WIN1251 NOT NULL,
    SHOWASCATEGORY  CHAR(1) CHARACTER SET WIN1251 DEFAULT 'Y' COLLATE PXW_CYRL,
    PUBLISHED       CHAR(1) CHARACTER SET WIN1251 DEFAULT 'N' NOT NULL
);

CREATE TABLE TOVARY (
    TOVAR_ID   INTEGER NOT NULL,
    NAME       CHAR(60) CHARACTER SET WIN1251,
    PRINTNAME  CHAR(60) CHARACTER SET WIN1251,
    TYPE_ID    SMALLINT DEFAULT 1,
    TAX_ID     INTEGER NOT NULL,
    ISACTIVE   CHAR(1) CHARACTER SET WIN1251,
    PUBLISHED  PUBLISHED,
    FKEY_1C    INTEGER
);

CREATE TABLE TOVARY_PRICES (
    POS_ID       INTEGER NOT NULL,
    TOVAR_ID     INTEGER NOT NULL,
    PRICE_DATE   DATE NOT NULL,
    PRICE_VALUE  T_MONEY,
    PUBLISHED    PUBLISHED,
    ISUSED       CHAR(1) CHARACTER SET WIN1251 DEFAULT ''
);

CREATE TABLE WORKS (
    WORK_ID    INTEGER NOT NULL,
    WORKNAME   CHAR(20) CHARACTER SET WIN1251 NOT NULL,
    PUBLISHED  PUBLISHED NOT NULL
);





/******************************************************************************/
/***                              Primary Keys                              ***/
/******************************************************************************/

ALTER TABLE BALANCES ADD CONSTRAINT PK_BALANCES PRIMARY KEY (POS_ID, BALANCEDATE, TOVAR_ID);
ALTER TABLE BPOS ADD CONSTRAINT PK_BPOS PRIMARY KEY (POS_ID);
ALTER TABLE DOBAVKI ADD CONSTRAINT PK_DOBAVKI PRIMARY KEY (TOVAR_ID, DOBAVKA_ID);
ALTER TABLE INTL_RASHOD ADD CONSTRAINT PK_INTL_RASHOD PRIMARY KEY (ID);
ALTER TABLE MGTPACKETS ADD CONSTRAINT PK_MGTPACKETS PRIMARY KEY (POS_ID, DEST_POS_ID, PACKETNO);
ALTER TABLE MGTPACKETS_IN ADD CONSTRAINT PK_MGTPACKETS_IN PRIMARY KEY (POS_ID, PACKETNO);
ALTER TABLE PAYCHECKS ADD CONSTRAINT PK_PAYCHECKS PRIMARY KEY (POS_ID, SMENA_ID, CHECKNO);
ALTER TABLE PAYCHECKS_TB ADD CONSTRAINT PK_PAYCHECKS_TB PRIMARY KEY (POS_ID, CHECKNO, STRNO);
ALTER TABLE PCHECKS_INTL ADD CONSTRAINT PK_PCHECKS_INTL PRIMARY KEY (POS_ID, SMENA_ID, CHECKNO);
ALTER TABLE PCHECKS_INTL_TB ADD CONSTRAINT PK_PCHECKS_INTL_TB PRIMARY KEY (POS_ID, CHECKNO, STRNO);
ALTER TABLE PERSONAL ADD CONSTRAINT PK_PERSONAL PRIMARY KEY (PERSON_ID);
ALTER TABLE PERS_STATUS ADD CONSTRAINT PK_PERS_STATUS PRIMARY KEY (STATUS_ID);
ALTER TABLE SMENY ADD CONSTRAINT PK_SMENY PRIMARY KEY (POS_ID, SMENA_ID);
ALTER TABLE SMENY_TB ADD CONSTRAINT PK_SMENY_TB PRIMARY KEY (POS_ID, SMENA_ID, PERSON_ID);
ALTER TABLE TAXS ADD CONSTRAINT PK_TAXS PRIMARY KEY (TAX_ID);
ALTER TABLE TOVARY ADD CONSTRAINT PK_TOVARY PRIMARY KEY (TOVAR_ID);
ALTER TABLE TOVARY_PRICES ADD CONSTRAINT PK_TOVARY_PRICES PRIMARY KEY (POS_ID, TOVAR_ID, PRICE_DATE);
ALTER TABLE TOVAR_TYPE ADD CONSTRAINT PK_TOVAR_TYPE PRIMARY KEY (TYPE_ID);
ALTER TABLE WORKS ADD CONSTRAINT PK_WORKS PRIMARY KEY (WORK_ID);


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE INDEX BALANCES_IDX1 ON BALANCES (POS_ID);
CREATE INDEX BALANCES_IDX2 ON BALANCES (BALANCEDATE);
CREATE INDEX BALANCES_IDX3 ON BALANCES (TOVAR_ID);
CREATE INDEX BPOS_IDX1 ON BPOS (PUBLISHED);
CREATE INDEX BPOS_IDX2 ON BPOS (POS_ID);
CREATE INDEX BPOS_IDX3 ON BPOS (POS_NAME);
CREATE INDEX INTL_RASHOD_IDX1 ON INTL_RASHOD (PUBLISHED);
CREATE INDEX MGTPACKETS_IDX1 ON MGTPACKETS (POS_ID);
CREATE INDEX MGTPACKETS_IDX2 ON MGTPACKETS (DEST_POS_ID);
CREATE INDEX MGTPACKETS_IDX3 ON MGTPACKETS (PACKETNO);
CREATE INDEX MGTPACKETS_IN_IDX1 ON MGTPACKETS_IN (POS_ID);
CREATE INDEX MGTPACKETS_IN_IDX2 ON MGTPACKETS_IN (PROCESSED);
CREATE INDEX MGTPACKETS_IN_IDX3 ON MGTPACKETS_IN (PACKETNO);
CREATE INDEX PAYCHECKS_IDX1 ON PAYCHECKS (POS_ID);
CREATE INDEX PAYCHECKS_IDX2 ON PAYCHECKS (CHECKNO);
CREATE INDEX PAYCHECKS_IDX3 ON PAYCHECKS (STAMP);
CREATE INDEX PAYCHECKS_IDX4 ON PAYCHECKS (PUBLISHED);
CREATE INDEX PAYCHECKS_IDX5 ON PAYCHECKS (RET);
CREATE INDEX PAYCHECKS_IDX6 ON PAYCHECKS (SMENA_ID);
CREATE INDEX PAYCHECKS_TB_IDX1 ON PAYCHECKS_TB (POS_ID);
CREATE INDEX PAYCHECKS_TB_IDX2 ON PAYCHECKS_TB (CHECKNO);
CREATE INDEX PAYCHECKS_TB_IDX3 ON PAYCHECKS_TB (PUBLISHED);
CREATE INDEX PAYCHECKS_TB_IDX4 ON PAYCHECKS_TB (ROW_NPP);
CREATE INDEX PCHECKS_INTL_IDX1 ON PCHECKS_INTL (POS_ID);
CREATE INDEX PCHECKS_INTL_IDX2 ON PCHECKS_INTL (SMENA_ID);
CREATE INDEX PCHECKS_INTL_IDX3 ON PCHECKS_INTL (CHECKNO);
CREATE INDEX PCHECKS_INTL_IDX4 ON PCHECKS_INTL (STAMP);
CREATE INDEX PCHECKS_INTL_IDX5 ON PCHECKS_INTL (RASHOD_ID);
CREATE INDEX PCHECKS_INTL_IDX6 ON PCHECKS_INTL (PERSON_ID);
CREATE INDEX PCHECKS_INTL_IDX7 ON PCHECKS_INTL (PUBLISHED);
CREATE INDEX PCHECKS_INTL_TB_IDX1 ON PCHECKS_INTL_TB (POS_ID);
CREATE INDEX PCHECKS_INTL_TB_IDX2 ON PCHECKS_INTL_TB (CHECKNO);
CREATE INDEX PCHECKS_INTL_TB_IDX3 ON PCHECKS_INTL_TB (TOVAR_ID);
CREATE INDEX PCHECKS_INTL_TB_IDX4 ON PCHECKS_INTL_TB (PUBLISHED);
CREATE INDEX PCHECKS_INTL_TB_IDX5 ON PCHECKS_INTL_TB (ROW_NPP);
CREATE INDEX FIO_IDX ON PERSONAL (FIO);
CREATE INDEX PERSONAL_IDX1 ON PERSONAL (ISACTIVE);
CREATE INDEX PERSONAL_IDX2 ON PERSONAL (PUBLISHED);
CREATE INDEX PERSONAL_IDX3 ON PERSONAL (PERSON_ID);
CREATE INDEX PERS_STATUS_IDX1 ON PERS_STATUS (PUBLISHED);
CREATE INDEX PERS_STATUS_IDX2 ON PERS_STATUS (STATUS_ID);
CREATE INDEX SMENY_IDX1 ON SMENY (POS_ID);
CREATE INDEX SMENY_IDX2 ON SMENY (SMENA_ID);
CREATE INDEX SMENY_IDX3 ON SMENY (DATEOPEN);
CREATE INDEX SMENY_IDX4 ON SMENY (DATECLOSE);
CREATE INDEX SMENY_IDX5 ON SMENY (CHIEF);
CREATE INDEX SMENY_IDX6 ON SMENY (PUBLISHED);
CREATE INDEX SMENY_TB_IDX1 ON SMENY_TB (POS_ID);
CREATE INDEX SMENY_TB_IDX2 ON SMENY_TB (SMENA_ID);
CREATE INDEX SMENY_TB_IDX3 ON SMENY_TB (PERSON_ID);
CREATE INDEX SMENY_TB_IDX4 ON SMENY_TB (WORK_ID);
CREATE INDEX SMENY_TB_IDX5 ON SMENY_TB (PUBLISHED);
CREATE INDEX SMENY_TB_IDX6 ON SMENY_TB (TIME_START);
CREATE INDEX SMENY_TB_IDX7 ON SMENY_TB (TIME_END);
CREATE INDEX TAXS_IDX1 ON TAXS (PUBLISHED);
CREATE INDEX TOVARY_IDX1 ON TOVARY (TOVAR_ID);
CREATE INDEX TOVARY_IDX2 ON TOVARY (NAME);
CREATE INDEX TOVARY_IDX3 ON TOVARY (TYPE_ID);
CREATE INDEX TOVARY_IDX4 ON TOVARY (TAX_ID);
CREATE INDEX TOVARY_IDX5 ON TOVARY (ISACTIVE);
CREATE INDEX TOVARY_IDX6 ON TOVARY (PUBLISHED);
CREATE INDEX TOVARY_PRICES_IDX1 ON TOVARY_PRICES (POS_ID);
CREATE INDEX TOVARY_PRICES_IDX2 ON TOVARY_PRICES (TOVAR_ID);
CREATE INDEX TOVARY_PRICES_IDX3 ON TOVARY_PRICES (PRICE_DATE);
CREATE INDEX TOVARY_PRICES_IDX4 ON TOVARY_PRICES (PUBLISHED);
CREATE INDEX TOVAR_TYPE_IDX1 ON TOVAR_TYPE (TYPE_ID);
CREATE INDEX TOVAR_TYPE_IDX2 ON TOVAR_TYPE (TYPE_NAME);
CREATE INDEX TOVAR_TYPE_IDX3 ON TOVAR_TYPE (PUBLISHED);
CREATE INDEX WORKS_IDX1 ON WORKS (WORK_ID);
CREATE INDEX WORKS_IDX2 ON WORKS (PUBLISHED);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/


SET TERM ^ ;




/* Trigger: BPOS_BI */
CREATE TRIGGER BPOS_BI FOR BPOS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    if (NEW.PUBLISHED = '') then begin
        NEW.PUBLISHED = 'N';
    end
  END
end
^

/* Trigger: BPOS_BI2 */
CREATE TRIGGER BPOS_BI2 FOR BPOS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF ((NEW.POS_ID IS NULL) or (NEW.POS_ID = 0)) THEN
    NEW.POS_ID = GEN_ID(GEN_POS_ID,1);
end
^

/* Trigger: BPOS_BU */
CREATE TRIGGER BPOS_BU FOR BPOS
ACTIVE BEFORE UPDATE POSITION 0
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    IF (OLD.published <> 'N') THEN BEGIN
      NEW.PUBLISHED = 'U';
    END
  END
end
^

/* Trigger: INTL_RASHOD_BI */
CREATE TRIGGER INTL_RASHOD_BI FOR INTL_RASHOD
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_INTL_RASHOD_ID,1);
END
^

/* Trigger: PAYCHECKS_BI */
CREATE TRIGGER PAYCHECKS_BI FOR PAYCHECKS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    if ((NEW.PUBLISHED IS NULL) OR (NEW.PUBLISHED = '')) then begin
        NEW.PUBLISHED = 'N';
    end
  END
end
^

/* Trigger: PAYCHECKS_BU */
CREATE TRIGGER PAYCHECKS_BU FOR PAYCHECKS
ACTIVE BEFORE UPDATE POSITION 0
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    IF ((OLD.published is NUll) OR (OLD.published = '') OR (OLD.published = 'N')) THEN BEGIN
      NEW.PUBLISHED = 'U';
    END
  END
end
^

/* Trigger: PAYCHECKS_TB_AF_UPD */
CREATE TRIGGER PAYCHECKS_TB_AF_UPD FOR PAYCHECKS_TB
ACTIVE AFTER INSERT OR UPDATE POSITION 0
AS
   declare variable curposno integer;
   declare variable curcheckno integer;
   declare variable mysum decimal(15,2);
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN

    curposno = new.pos_id;
    curcheckno = new.checkno;

--    if (not exists (select * from paychecks
--        where (pos_id=:curposno) and (checkno=:curcheckno) ) ) then
--            exception paycheck_notfound;


    SELECT sum(KVO*PRICE) FROM PAYCHECKS_TB
       where (pos_id=:curposno) and (checkno=:curcheckno)
       into :mysum;

     update paychecks set summa=:mysum
        where (pos_id=:curposno) and (checkno=:curcheckno);
   end
end
^

/* Trigger: PAYCHECKS_TB_BI */
CREATE TRIGGER PAYCHECKS_TB_BI FOR PAYCHECKS_TB
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    if ((NEW.PUBLISHED IS NULL) OR (NEW.PUBLISHED = '')) then begin
        NEW.PUBLISHED = 'N';
    end
  END
end
^

/* Trigger: PAYCHECKS_TB_BU */
CREATE TRIGGER PAYCHECKS_TB_BU FOR PAYCHECKS_TB
ACTIVE BEFORE UPDATE POSITION 0
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    IF ((OLD.published <> 'N') AND (OLD.published <> 'U')) THEN BEGIN
      NEW.PUBLISHED = 'U';
    END
  END
end
^

/* Trigger: PCHECKS_INTL_BI */
CREATE TRIGGER PCHECKS_INTL_BI FOR PCHECKS_INTL
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    if ((NEW.PUBLISHED IS NULL) OR (NEW.PUBLISHED = '')) then begin
        NEW.PUBLISHED = 'N';
    end
  END
end
^

/* Trigger: PCHECKS_INTL_BU */
CREATE TRIGGER PCHECKS_INTL_BU FOR PCHECKS_INTL
ACTIVE BEFORE UPDATE POSITION 0
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    IF ((OLD.published is NUll) OR (OLD.published = '') OR (OLD.published = 'N')) THEN BEGIN
      NEW.PUBLISHED = 'U';
    END
  END
end
^

/* Trigger: PCHECKS_INTL_TB_AF_UPD */
CREATE TRIGGER PCHECKS_INTL_TB_AF_UPD FOR PCHECKS_INTL_TB
ACTIVE AFTER INSERT OR UPDATE POSITION 0
AS
   declare variable curposno integer;
   declare variable curcheckno integer;
   declare variable mysum decimal(15,2);
begin
  curposno = new.pos_id;
  curcheckno = new.checkno;

--  if (not exists (select * from pchecks_intl
--        where (pos_id=:curposno) and (checkno=:curcheckno) ) ) then
--            exception paycheck_notfound;


  SELECT sum(KVO*PRICE) FROM PCHECKS_INTL_TB
     where (pos_id=:curposno) and (checkno=:curcheckno)
     into :mysum;

   update pchecks_intl set summa=:mysum
      where (pos_id=:curposno) and (checkno=:curcheckno);

end
^

/* Trigger: PCHECKS_INTL_TB_BI */
CREATE TRIGGER PCHECKS_INTL_TB_BI FOR PCHECKS_INTL_TB
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    if ((NEW.PUBLISHED IS NULL) OR (NEW.PUBLISHED = '')) then begin
        NEW.PUBLISHED = 'N';
    end
  END
end
^

/* Trigger: PCHECKS_INTL_TB_BU */
CREATE TRIGGER PCHECKS_INTL_TB_BU FOR PCHECKS_INTL_TB
ACTIVE BEFORE UPDATE POSITION 0
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    IF ((OLD.published <> 'N') AND (OLD.published <> 'U')) THEN BEGIN
      NEW.PUBLISHED = 'U';
    END
  END
end
^

/* Trigger: PERSONAL_BI */
CREATE TRIGGER PERSONAL_BI FOR PERSONAL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.PERSON_ID IS NULL) THEN
    NEW.PERSON_ID = GEN_ID(GEN_PERSONAL_ID,1);
END
^

/* Trigger: PERSONAL_BI2 */
CREATE TRIGGER PERSONAL_BI2 FOR PERSONAL
ACTIVE BEFORE INSERT POSITION 1
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    if ((NEW.PUBLISHED IS NULL) OR (NEW.PUBLISHED = '')) then begin
        NEW.PUBLISHED = 'N';
    end
  END
end
^

/* Trigger: PERSONAL_BU */
CREATE TRIGGER PERSONAL_BU FOR PERSONAL
ACTIVE BEFORE UPDATE POSITION 0
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    IF ((OLD.published <> 'N') AND (OLD.published <> 'U')) THEN BEGIN
      NEW.PUBLISHED = 'U';
    END
  END
end
^

/* Trigger: PERS_STATUS_BI */
CREATE TRIGGER PERS_STATUS_BI FOR PERS_STATUS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.STATUS_ID IS NULL) THEN
    NEW.STATUS_ID = GEN_ID(GEN_PERS_STATUS_ID,1);
END
^

/* Trigger: PERS_STATUS_BI2 */
CREATE TRIGGER PERS_STATUS_BI2 FOR PERS_STATUS
ACTIVE BEFORE INSERT POSITION 1
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    if ((NEW.PUBLISHED IS NULL) OR (NEW.PUBLISHED = '')) then begin
        NEW.PUBLISHED = 'N';
    end
  END
end
^

/* Trigger: PERS_STATUS_BU */
CREATE TRIGGER PERS_STATUS_BU FOR PERS_STATUS
ACTIVE BEFORE UPDATE POSITION 0
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    IF ((OLD.published <> 'N') AND (OLD.published <> 'U')) THEN BEGIN
      NEW.PUBLISHED = 'U';
    END
  END
end
^

/* Trigger: SMENY_BI */
CREATE TRIGGER SMENY_BI FOR SMENY
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.SMENA_ID IS NULL) THEN
    NEW.SMENA_ID = GEN_ID(GEN_SMENY_ID,1);
END
^

/* Trigger: SMENY_BI2 */
CREATE TRIGGER SMENY_BI2 FOR SMENY
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    if ((NEW.PUBLISHED IS NULL) OR (NEW.PUBLISHED = '')) then begin
        NEW.PUBLISHED = 'N';
    end
  END
end
^

/* Trigger: SMENY_BU2 */
CREATE TRIGGER SMENY_BU2 FOR SMENY
ACTIVE BEFORE UPDATE POSITION 0
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    IF ((OLD.published <> 'N') AND (OLD.published <> 'U')) THEN BEGIN
      NEW.PUBLISHED = 'U';
    END
  END
end
^

/* Trigger: SMENY_TB_BU0 */
CREATE TRIGGER SMENY_TB_BU0 FOR SMENY_TB
ACTIVE BEFORE UPDATE POSITION 0
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    IF ((OLD.published <> 'N') AND (OLD.published <> 'U')) THEN BEGIN
      NEW.PUBLISHED = 'U';
    END
  END
end
^

/* Trigger: TOVARY_BI */
CREATE TRIGGER TOVARY_BI FOR TOVARY
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF ((NEW.TOVAR_ID IS NULL) or (NEW.TOVAR_ID = 0)) THEN
    NEW.TOVAR_ID = GEN_ID(GEN_TOVARY_ID,1);
END
^

/* Trigger: TOVARY_BI2 */
CREATE TRIGGER TOVARY_BI2 FOR TOVARY
ACTIVE BEFORE INSERT POSITION 1
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    if ((NEW.PUBLISHED IS NULL) OR (NEW.PUBLISHED = '')) then begin
        NEW.PUBLISHED = 'N';
    end
  END
end
^

/* Trigger: TOVARY_BU */
CREATE TRIGGER TOVARY_BU FOR TOVARY
ACTIVE BEFORE UPDATE POSITION 0
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    IF ((OLD.published <> 'N') AND (OLD.published <> 'U')) THEN BEGIN
      NEW.PUBLISHED = 'U';
    END
  END
end
^

/* Trigger: TOVARY_PRICES_BI */
CREATE TRIGGER TOVARY_PRICES_BI FOR TOVARY_PRICES
ACTIVE BEFORE INSERT POSITION 1
AS
   declare variable curposid integer;
   declare variable curtovid integer;
   declare variable curdate date;
begin
  curposid = new.pos_id;
  curtovid = new.TOVAR_ID;
  curdate = new.PRICE_DATE;

  if (exists (select * from tovary_prices
        where (pos_id=:curposid)
        and (TOVAR_ID=:curtovid)
        and (PRICE_DATE = :curdate)) )
        then
            exception samedates;

  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    if ((NEW.PUBLISHED IS NULL) OR (NEW.PUBLISHED = '')) then begin
        NEW.PUBLISHED = 'N';
    end
  END
end
^

/* Trigger: TOVARY_PRICES_BU */
CREATE TRIGGER TOVARY_PRICES_BU FOR TOVARY_PRICES
ACTIVE BEFORE UPDATE POSITION 0
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    IF ((OLD.published <> 'N') AND (OLD.published <> 'U')) THEN BEGIN
      NEW.PUBLISHED = 'U';
    END
  END
end
^

/* Trigger: TOVAR_TYPE_BI */
CREATE TRIGGER TOVAR_TYPE_BI FOR TOVAR_TYPE
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
     if ((NEW.PUBLISHED IS NULL) OR (NEW.PUBLISHED = '')) then begin
       NEW.PUBLISHED = 'N';
    end
  END
end
^

/* Trigger: TOVAR_TYPE_BU */
CREATE TRIGGER TOVAR_TYPE_BU FOR TOVAR_TYPE
ACTIVE BEFORE UPDATE POSITION 0
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    IF ((OLD.published <> 'N') AND (OLD.published <> 'U')) THEN BEGIN
      NEW.PUBLISHED = 'U';
    END
  END
end
^

/* Trigger: WORKS_BI */
CREATE TRIGGER WORKS_BI FOR WORKS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.WORK_ID IS NULL) THEN
    NEW.WORK_ID = GEN_ID(GEN_WORKS_ID,1);
END
^

/* Trigger: WORKS_BI2 */
CREATE TRIGGER WORKS_BI2 FOR WORKS
ACTIVE BEFORE INSERT POSITION 1
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    if ((NEW.PUBLISHED IS NULL) OR (NEW.PUBLISHED = '')) then begin
        NEW.PUBLISHED = 'N';
    end
  END
end
^

/* Trigger: WORKS_BU */
CREATE TRIGGER WORKS_BU FOR WORKS
ACTIVE BEFORE UPDATE POSITION 0
AS
begin
  IF (CURRENT_ROLE <> 'PUBLISH') THEN BEGIN
    IF ((OLD.published <> 'N') AND (OLD.published <> 'U')) THEN BEGIN
      NEW.PUBLISHED = 'U';
    END
  END
end
^

SET TERM ; ^


/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/


SET TERM ^ ;

ALTER PROCEDURE CREATE_MGTPACKET (
    POS_ID INTEGER,
    DEST_POS_ID INTEGER)
RETURNS (
    PACNO INTEGER)
AS
DECLARE VARIABLE NEWNO INTEGER;
begin
  SELECT MAX(MGTPACKETS.PACKETNO) FROM MGTPACKETS
  WHERE (
    (POS_ID=:POS_ID)
  AND
    (DEST_POS_ID=:DEST_POS_ID)
  ) INTO NEWNO;

  IF (NEWNO is NULL) THEN
    BEGIN
      NEWNO=0;
    END

  NEWNO=NEWNO + 1;
  INSERT INTO MGTPACKETS (POS_ID,DEST_POS_ID,PACKETNO) VALUES (:POS_ID,:DEST_POS_ID,:NEWNO);
  PACNO = NEWNO;
end
^

ALTER PROCEDURE CREATE_PAYCHECK (
    POS_ID INTEGER,
    DATIME TIMESTAMP,
    SMENA_ID INTEGER,
    EKR_CHECKNO INTEGER,
    EKR_SUMMA FLOAT,
    MARKET_AGE INTEGER,
    MARKET_MALE INTEGER,
    ZAKAZNO INTEGER)
RETURNS (
    CHECKNO INTEGER)
AS
declare variable newno integer;
begin
  newno = GEN_ID(gen_paychecks_id,1);
  insert into paychecks
    (pos_id,smena_id,checkno,stamp,summa,ekr_checkno,ekr_summa, m_male, m_age, zakazno)
    values (:POS_ID, :SMENA_ID, :NEWNO, :DATIME, 0, :ekr_checkno, :ekr_summa, :MARKET_MALE, :MARKET_AGE, :ZAKAZNO);
  CHECKNO = NEWNO;
end
^

ALTER PROCEDURE CREATE_PAYCHECK_INTL (
    POS_ID INTEGER,
    DATIME TIMESTAMP,
    SMENA_ID INTEGER,
    RASHOD_ID INTEGER,
    PERSON_ID INTEGER)
RETURNS (
    CHECKNO INTEGER)
AS
DECLARE VARIABLE NEWNO INTEGER;
begin
  newno = GEN_ID(gen_paychecks_intl_id,1);
  insert into pchecks_intl (pos_id,smena_id,checkno,rashod_id,person_id,stamp,summa) values (:POS_ID, :SMENA_ID, :NEWNO, :RASHOD_ID, :PERSON_ID, :DATIME, 0);
  CHECKNO = NEWNO;
end
^

ALTER PROCEDURE CREATE_PAYCHECK_RET (
    POS_ID INTEGER,
    DATIME TIMESTAMP,
    SMENA_ID INTEGER,
    EKR_CHECKNO INTEGER,
    EKR_SUMMA FLOAT)
RETURNS (
    CHECKNO INTEGER)
AS
DECLARE VARIABLE NEWNO INTEGER;
begin
  newno = GEN_ID(gen_paychecks_id,1);
  insert into paychecks (pos_id,smena_id,checkno,stamp,summa,ekr_checkno,ekr_summa,ret) values (:POS_ID, :SMENA_ID, :NEWNO, :DATIME, 0, :ekr_checkno, :ekr_summa, 1);
  CHECKNO = NEWNO;
end
^

ALTER PROCEDURE GET_TEKSMENA (
    POS_ID INTEGER)
RETURNS (
    SMENAID INTEGER)
AS
DECLARE VARIABLE VREMSMENAID INTEGER;
begin
   SMENAID=0;
   if (exists(select smena_id from smeny where ((POS_ID=:POS_ID) and (dateclose is null)))) then
     begin
       select smena_id from smeny
          where ((POS_ID=:POS_ID) and (dateclose is null))
          into :VREMSMENAID;
       smenaid = :VREMSMENAID;
     end
end
^

ALTER PROCEDURE GET_TOVAR_PRICE (
    PRICEDATE DATE,
    TOVAR_ID INTEGER,
    POS_ID INTEGER)
RETURNS (
    PRICE NUMERIC(15,2))
AS
DECLARE VARIABLE TMPPRICEVAL DECIMAL(15,2);
DECLARE VARIABLE TMPPRICEDATE DATE;
BEGIN

select max(tovary_prices.price_date)
      from tovary_prices
      where (
         tovary_prices.price_date <= :PRICEDATE
      and
         tovary_prices.tovar_id = :TOVAR_ID
      and
         tovary_prices.pos_id = :POS_ID
         )
      INTO :tmppricedate;

select max(PRICE_VALUE) from tovary_prices
  where (
         tovary_prices.price_date = :tmppricedate
      and
         tovary_prices.tovar_id = :tovar_id
      and
         tovary_prices.pos_id = :POS_ID
      )
  INTO :tmppriceval;

  price = :tmppriceval;
END
^


SET TERM ; ^


/******************************************************************************/
/***                                 Roles                                  ***/
/******************************************************************************/

CREATE ROLE PUBLISH;
